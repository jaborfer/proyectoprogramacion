/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VISTA;

import static Principal.DesvanMika.cn;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Este formulario se encarga de la gestión de los colores asi como la
 * creacción, modificacion y supresion en la base de datos
 *
 * @author Josete
 */
public class ColoresForm extends javax.swing.JFrame {

    String clavePrincipal = null;

    /**
     * Crea la ventana, cambia el icono, el titulo y muesta la tabla
     */
    public ColoresForm() {

        setTitle("Colores-Desvan de Mika");
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagenes/icono.jpg"));
        setIconImage(icon);
        initComponents();
        muestraTabla("Colorprincipal", "");
        botonAct.setEnabled(false);
    }

    /**
     * Metodo que pasado el nombre de un campo de la base de datos y un texto a
     * buscar rellena la tabla con ese patrón
     *
     * @param Campo Este parametro es el nombre del campo de la tabla
     * @param Busca Este parametro es el texto a boscar
     */
    private void muestraTabla(String Campo, String Busca) {
        String consulta;
        String respuesta[] = new String[3];

        tablaColor.setEnabled(true);
        tablaColor.setVisible(true);
        DefaultTableModel tc = new DefaultTableModel();
        tc.addColumn("Id color");
        tc.addColumn("Color principal");
        tc.addColumn("Caracteristica");
        tablaColor.setModel(tc);

        consulta = "Select * from color where " + Campo + " LIKE'%" + Busca + "%'";

        try {
            Statement st = cn.createStatement();
            ResultSet resultado = st.executeQuery(consulta);
            while (resultado.next()) {
                respuesta[0] = resultado.getString(1);
                respuesta[1] = resultado.getString(2);
                respuesta[2] = resultado.getString(3);
                tc.addRow(respuesta);
            }// fin del while
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(ColoresForm.class.getName()).log(Level.SEVERE, null, ex);
        } //fin del try cacth

    } //fin del metodo

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu2 = new javax.swing.JPopupMenu();
        opcionModificar = new javax.swing.JMenuItem();
        opcionBorrar = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaColor = new javax.swing.JTable();
        botonAtras = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        colorPrin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        colorSec = new javax.swing.JTextField();
        botonAñadir = new javax.swing.JButton();
        botonAct = new javax.swing.JButton();

        opcionModificar.setText("Modificar");
        opcionModificar.setToolTipText("");
        opcionModificar.setComponentPopupMenu(jPopupMenu2);
        opcionModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionModificarActionPerformed(evt);
            }
        });
        jPopupMenu2.add(opcionModificar);

        opcionBorrar.setForeground(new java.awt.Color(255, 0, 51));
        opcionBorrar.setText("ELIMINAR");
        opcionBorrar.setComponentPopupMenu(jPopupMenu2);
        opcionBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionBorrarActionPerformed(evt);
            }
        });
        jPopupMenu2.add(opcionBorrar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(167, 91, 91));

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setBackground(new java.awt.Color(253, 181, 142));
        label1.setFont(new java.awt.Font("Comic Sans MS", 0, 48)); // NOI18N
        label1.setForeground(new java.awt.Color(167, 91, 91));
        label1.setText("El desvan de Mika");

        tablaColor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaColor.setComponentPopupMenu(jPopupMenu2);
        jScrollPane1.setViewportView(tablaColor);

        botonAtras.setText("menu Ficheros");
        botonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAtrasActionPerformed(evt);
            }
        });

        jLabel1.setText("Color principal");

        colorPrin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                colorPrinKeyReleased(evt);
            }
        });

        jLabel2.setText("Caracteristica");

        colorSec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                colorSecKeyReleased(evt);
            }
        });

        botonAñadir.setText("Añadir");
        botonAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirActionPerformed(evt);
            }
        });

        botonAct.setText("Actualizar");
        botonAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(botonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(botonAñadir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonAct))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(colorPrin, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorSec, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(colorPrin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(colorSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAñadir)
                    .addComponent(botonAct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Al pulsar el boton cierra esta ventana y vuelve a abrir el menu ficheros
     *
     */
    private void botonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAtrasActionPerformed
        MenuFicheros mf = new MenuFicheros();
        mf.setLocationRelativeTo(null);
        mf.setVisible(true);

        dispose();
    }//GEN-LAST:event_botonAtrasActionPerformed
    /**
     * Al pulsar este boton, comprueba que los campos esten llenos y de ser asi
     * crea el registro en la base de datos
     *
     */
    private void botonAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirActionPerformed
        if (colorPrin.getText().equals("") || colorSec.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Los campos no pueden estar vacios");
        } else {
            try {
                PreparedStatement orden = cn.prepareStatement("INSERT INTO COLOR(colorprincipal,Subcolor) values(?,?)");
                orden.setString(1, colorPrin.getText().toUpperCase());
                orden.setString(2, colorSec.getText().toUpperCase());
                orden.executeUpdate();
                orden.close();
                JOptionPane.showMessageDialog(null, "Guardado con Exito");
                colorPrin.setText("");
                colorSec.setText("");
                muestraTabla("colorprincipal", "");
                
            } catch (SQLException ex) {
                Logger.getLogger(ColoresForm.class.getName()).log(Level.SEVERE, null, ex);
            } //fin del try-catch
        } // fin del if-else

    }//GEN-LAST:event_botonAñadirActionPerformed
    /**
     * metodo que va buscando en el campo color en tiempo real segun se va
     * escribiendo
     *
     */
    private void colorPrinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_colorPrinKeyReleased
        muestraTabla("colorprincipal", colorPrin.getText());
    }//GEN-LAST:event_colorPrinKeyReleased
    /**
     * metodo que va buscando en el campo color secundario en tiempo real segun
     * se va escribiendo
     *
     */
    private void colorSecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_colorSecKeyReleased
        muestraTabla("Subcolor", colorSec.getText());
    }//GEN-LAST:event_colorSecKeyReleased
    /**
     * Esta es la opcion modificar del menu emergente, lo que hace es comprobar
     * que hay una fila seleccionadad, lleva los datos de esa fila al formulario
     * y prepara todo para poder modificarla
     *
     */
    private void opcionModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionModificarActionPerformed
        int fila;
        fila = tablaColor.getSelectedRow();
        if (fila >= 0) {
            clavePrincipal = tablaColor.getValueAt(fila, 0).toString();
            colorPrin.setText(tablaColor.getValueAt(fila, 1).toString());
            colorSec.setText(tablaColor.getValueAt(fila, 2).toString());
            botonAct.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(null, "Pulse con el boton izquierdo para seleccionar una linea");
        } //fin del if-else
    }//GEN-LAST:event_opcionModificarActionPerformed
    /**
     * Al pulsar el boton actualizar, prepara y ejecuta el update en la base de
     * datos
     *
     */
    private void botonActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActActionPerformed
        String orden;
        orden = "Update color set colorprincipal='" + colorPrin.getText().toUpperCase() + "', subcolor='" + colorSec.getText().toUpperCase() + "' where idcolor=" + clavePrincipal;
        try {
            PreparedStatement pst = cn.prepareStatement(orden);
            pst.executeUpdate();
            pst.close();
            botonAct.setEnabled(false);
            muestraTabla("colorprincipal", "");
            colorPrin.setText("");
            colorSec.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(ColoresForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_botonActActionPerformed
    /**
     * Esta es la opcion borrar del menu emergente, lo que hace es comprobar que
     * hay una fila seleccionadad, lleva los datos de esa fila al formulario y
     * prepara todo para poder borrarla
     *
     */
    private void opcionBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionBorrarActionPerformed
        String orden;
        int fila;
        int respuesta;

        fila = tablaColor.getSelectedRow();
        if (fila >= 0) {
            respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro que que quiere borrar " + tablaColor.getValueAt(fila, 1) + " " + tablaColor.getValueAt(fila, 2) + "?");
            if (respuesta == 0) {
                orden = "DELETE FROM color where idcolor=" + tablaColor.getValueAt(fila, 0);
                PreparedStatement pst;
                try {
                    pst = cn.prepareStatement(orden);
                    pst.executeUpdate();
                    pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(ColoresForm.class.getName()).log(Level.SEVERE, null, ex);
                } // fin del try-catch
                muestraTabla("colorprincipal", "");
            } // fin del if interno

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila con el boton izquierdo");
        } // fin del if-else externo
    }//GEN-LAST:event_opcionBorrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAct;
    private javax.swing.JButton botonAtras;
    private javax.swing.JButton botonAñadir;
    private javax.swing.JTextField colorPrin;
    private javax.swing.JTextField colorSec;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private javax.swing.JMenuItem opcionBorrar;
    private javax.swing.JMenuItem opcionModificar;
    private javax.swing.JTable tablaColor;
    // End of variables declaration//GEN-END:variables

}
